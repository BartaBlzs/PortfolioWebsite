@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Roadmap</title>
    <link rel="stylesheet" href="~/css/roadmap.css">
</head>
<body>
    <div class="flex">
        <svg>
            <defs>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="25%" stop-color="#ffbe00" />
                    <stop offset="35%" stop-color="#e54c21" />
                    <stop offset="46%" stop-color="#e54c21" />
                    <stop offset="49%" stop-color="#264ee4" />
                    <stop offset="52%" stop-color="#264ee4" />
                    <stop offset="55%" stop-color="#f7e018" />
                    <stop offset="68%" stop-color="#f7e018" />
                    <stop offset="71%" stop-color="#690081" />
                </linearGradient>
            </defs>
            <path class="main-path" stroke-width="5px" fill="none" d="M -400 0 L -400 600 C -400 600 -400 700 -300 700 L -100 700 C -100 700 0 700 0 800 L 0 2000 C 0 2000 0 2100 100 2100 L 300 2100 C 300 2100 400 2100 400 2200 L 400 2600 C 400 2600 400 2700 300 2700 L 0 2700 C 0 2700 -100 2700 -100 2800 L -100 2900 C -100 2975 -200 2975 -200 2900 L -200 2600 C -200 2525 -300 2525 -300 2600 L -300 3200 C -300 3200 -300 3300 -200 3300 L 600 3300 C 600 3300 700 3300 700 3400 L 700 4300"></path>
        </svg>
    </div>
    <div class="content">
        <div>
            <h2>First encounter</h2>
            <p>Starting my coding journey with Scratch, I embraced its user-friendly drag-and-drop interface to build animations and games. The visual approach made learning programming concepts intuitive and enjoyable, laying a foundation for my coding skills. Scratch's simplicity ignited my passion for coding, propelling me towards more complex languages and projects.</p>
        </div>
        <div>
            <h2>Learning the basics</h2>
            <p>My programming journey continued with HTML and CSS. Crafting basic web pages, I learned the fundamentals of structure and styling. The dynamic interplay between HTML for structure and CSS for design sparked my passion for web development, setting the stage for more intricate projects.</p>
        </div>
        <div>
            <h2>Getting into it</h2>
            <p>Learning programming basics took a dynamic turn with JavaScript. Mastering variables, loops, and conditionals, I transitioned to building interactive web elements. Understanding asynchronous operations and DOM manipulation marked a breakthrough, expanding my skills in both front-end and back-end development. JavaScript opened doors to a broader programming spectrum.</p>
        </div>
        <div>
            <h2>C# and .NET</h2>
            <p>Learning C# played a crucial role in my programming journey. Beginning with the fundamentals, I mastered object-oriented programming concepts, laying a solid foundation.</p>
            <p>Starting from desktop development through cross platform apps to web applications, The .net framework can be used to create applications for many use cases. Here are a few that I managed to learn throughout my journey:</p>
            <div class="cards">
                <div class="card">
                    <div class="card-content">
                        <div class="front">
                            WPF
                        </div>
                        <div class="back">
                            WPF is a framework for building visually rich Windows desktop applications using XAML
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-content">
                        <div class="front">
                            .NET MAUI
                        </div>
                        <div class="back">
                            MAUI is a framework for building cross-platform applications with a single codebase
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-content">
                        <div class="front">
                            ASP.NET
                        </div>
                        <div class="back">
                            ASP .NET is a web framework, enabling the creation of dynamic and scalable web applications using C#
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="step-selector-container">
        <button class="step-selector" disabled onclick="prevStep()">
            <img src="~/imgs/down.svg" />
        </button>

        <button class="step-selector" onclick="nextStep()">
            <img src="~/imgs/down.svg" />
        </button>
    </div>
</body>
<script>
    const path = document.querySelector('.main-path')
    const totalLength = path.getTotalLength()
    const fades = document.querySelectorAll('.content > div')
    const steps = [{ dash: 1300, scroll: 0, d: 1500, color: '#ffbe00' },
    { dash: 3050, scroll: 1370, d: 1500, color: '#e54c21' },
    { dash: 4000, scroll: 1950, d: 750, color: '#f7e018' },
    { dash: totalLength, scroll: 3200, d: 1500, color: '#673273' }]
    var currentStep = 0

    window.onload = () => {
        document.querySelector('svg').setAttribute("height", path.getBoundingClientRect().height + 'px')
        path.style.strokeDasharray = totalLength
        path.style.strokeDashoffset = totalLength
        setTimeout(() => {
            window.scrollBy(-window.scrollX, -window.scrollY)
            path.style.transition = '2s ease-in-out'
            curstep = steps[0]
            path.style.strokeDashoffset = totalLength - curstep.dash
            fades[currentStep].style.opacity = 1
        }, 1)
    }

    var isScrolling = false

    function nextStep() {
        if (!isScrolling) {
            isScrolling = true
            curstep = steps[++currentStep]
            //path color
            path.style.stroke = curstep.color
            //step-selector buttons
            document.querySelector('.step-selector:first-child').disabled = false
            if (currentStep + 1 == fades.length) document.querySelector('.step-selector:last-child').disabled = true
            //navigating
            fades[currentStep - 1].style.opacity = 0
            path.style.strokeDashoffset = totalLength - curstep.dash
            scrollTo(curstep.scroll, curstep.d)
        }
    }

    function prevStep() {
        if (!isScrolling) {
            isScrolling = true
            curstep = steps[--currentStep]
            //path color
            path.style.stroke = curstep.color
            //step-selector buttons
            if (currentStep == 0) document.querySelector('.step-selector:first-child').disabled = true
            document.querySelector('.step-selector:last-child').disabled = false
            //navigating
            fades[currentStep + 1].style.opacity = 0
            path.style.strokeDashoffset = totalLength - curstep.dash
            setTimeout(() => {
                scrollTo(curstep.scroll, curstep.d + 500)
            }, 750)
        }
    }

    function scrollTo(scrollY, duration) {
        var scrollStep = (scrollY - window.scrollY) / (duration / 5)
        scrollInterval = setInterval(function () {
            if (scrollStep < 0) {
                if (window.scrollY > scrollY) {
                    window.scrollBy(0, scrollStep)
                }
                else {
                    clearInterval(scrollInterval)
                    isScrolling = false
                    fades[currentStep].style.opacity = 1
                }
            }
            else {
                if (window.scrollY < scrollY) {
                    window.scrollBy(0, scrollStep)
                }
                else {
                    clearInterval(scrollInterval)
                    isScrolling = false
                    fades[currentStep].style.opacity = 1
                }
            }
        }, 1)
    }

    document.querySelectorAll('.cards > .card').forEach(el => {
        el.addEventListener('click', e => {
            if (e.target.classList.contains('flipped')) e.target.classList.remove('flipped')
            else e.target.classList.add('flipped')
        })
    })

</script>
</html>